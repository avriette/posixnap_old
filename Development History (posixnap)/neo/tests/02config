#!/usr/bin/perl -w

BEGIN { $|++; print "1..23\n"; }
END   { print "not ok 1 # modules did not load\n" unless $looks_good }

use strict;
use warnings;
use vars qw/$looks_good/;
$looks_good=1;
print "ok 1\n";

my ( $conf, $file );

my $example_text1 = {
    'foo' => {
        '1' => 'bar',
        '2' => 'baz'
    },
    '1' => {
        '1' => '2',
        '2' => '3'
    },
    'a' => {
        '1' => 'b',
        '2' => 'c'
    }
};

my $example_text2 = {
    'version' => 2,
    'item' => {
        'foo' => {
            '1' => 'bar',
            '2' => 'baz'
        },
        '1' => {
            '1' => '2',
            '2' => '3'
        },
        'b' => {
            '1' => 'b',
            '2' => 'c'
        }
    }
};
my $example_xml1 = {
    'xml' => '1',
    'item' => {
        'foo' => {
            'price' => '123',
            'owner' => 'me',
        },
        'bar' => {
            'price' => '321',
            'owner' => 'you'
        }
    }
};

my $example_xml2 = { 
    'xml' => '1',
    'item' => {
        'foo' => {
            'price' => '333',
            'owner' => 'me',
        },
        'bar' => {
            'price' => '321',
            'owner' => 'you'
        }
    }
};

my $i = 2;

###
test ( eval { require Neopets::Config } ? 1 : 0, $i++ );

###
test ( eval { require Neopets::Config::Text } ? 1 : 0, $i++ );

###
test ( $conf = Neopets::Config -> new(), $i++ );

###
test ( $file = $conf -> read_config( { Text => 'conf.txt', docroot => 'tests/files' } ), $i++ );

###
test ( compare_hashes( $file ,$example_text1), $i++ );

###
test ( ! ( compare_hashes( $file ,$example_text2)), $i++ );

###
test ( $conf -> write_config( { Text => '.tmp.txt', docroot => 'tests/files', contents => $example_text2 } ), $i++ );

test ( eval { $file = $conf -> read_config( { Text => '.tmp.txt', docroot => 'tests/files' } ) } ? 1 : 0, $i++ );
test ( eval { unlink 'tests/files/.tmp.txt' } ? 1 : 0, $i++ );

test ( compare_hashes( $file, $example_text2), $i++ );

test ( $file = $conf -> read_config( { file => 'conf.txt', docroot => 'tests/files' } ), $i++ );
test ( compare_hashes( $file, $example_text1), $i++ );

if ( $ENV{EXTRA} ) {
    test ( eval { require Neopets::Config::XML } ? 1 : 0, $i++ );
    test ( $file = $conf -> read_config( { XML => 'conf.xml', docroot => 'tests/files' } ), $i++ );
    test ( compare_hashes( $file ,$example_xml1), $i++ );
    test ( ! ( compare_hashes( $file ,$example_xml2)), $i++ );
    test ( $conf -> write_config( { XML => '.tmp.xml', docroot => 'tests/files', contents => $example_xml2 } ), $i++ );
    test ( $file = $conf -> read_config( { XML => '.tmp.xml', docroot => 'tests/files' } ), $i++ );
    test ( eval { unlink 'tests/files/.tmp.xml' } ? 1 : 0, $i++ );
    test ( compare_hashes( $file ,$example_xml2), $i++ );
    test ( $file = $conf -> read_config( { file => 'conf.xml', docroot => 'tests/files' } ), $i++ );
    test ( compare_hashes( $file ,$example_xml1), $i++ );
} else {
    foreach ( 1 .. 10 ) {
        test ( 1, $i++, "# skip" );
    }
}

exit;

sub test {
  print $_[0] ? "" : "not ",
        "ok $_[1]",
        $_[2] ? " $_[2]" : "", "\n";
}

sub compare_hashes {
    my %h1 = %{ shift() };
    my %h2 = %{ shift() };

    my @k1 = keys %h1;
    my @k2 = keys %h2;

    if ( @k1 != @k2 ) { return 0 }
    if ( join('' , sort @k1) ne join('' , sort @k2) ) { return 0 }
    foreach my $key ( @k1 ) {
        if ( ref($h1{$key}) eq 'HASH' 
                and ref($h2{$key}) eq 'HASH') {
            return 0 unless compare_hashes( $h1{$key}, $h2{$key} );
        } else {
            if ( $h1{$key} ne $h2{$key} ) { return 0 };
        }
    }

    1;
}
