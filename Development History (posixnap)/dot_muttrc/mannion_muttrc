# Cormac Mannion's .muttrc

# {{{PERSONAL
set realname = "" # undefined
set quit = ask-yes
set user_agent = yes
my_hdr X-Operating-System: `uname -sr`
my_hdr X-PGP-Public-Key: # undefined
my_hdr X-PGP-Key-Fingerprint: # undefined
set hostname = "posixnap.net"
set hidden_host
# }}}

# {{{ACCOUNT
set imap_user = "luser@posixnap.net"
set ssl_use_sslv3 = yes
set ssl_use_tlsv1 = yes
set imap_force_ssl = yes
# }}}

# {{{ MAILBOXES
set sort=threads
set sort_aux=date-sent
set folder=~/.mutt/saved
set record=~/.mutt/sent
mailboxes `find ~/.mutt/saved -type f -maxdepth 1 -mindepth 1`
lists `cat ~/.mutt/subscribed`
subscribe `cat ~/.mutt/subscribed`
save-hook *@minotaur.posixnap.net =posixnap_cvs
save-hook "~C armed@posixnap.net" =posixnap_armed
save-hook "~C misc@openbsd.org" =openbsd_misc
save-hook "~C poe@perl.org" =perl_poe
# }}}

# {{{PGP
# This is shamelessly stolen from Roland Rosenfeld

# decode application/pgp
set pgp_decode_command="gpg --keyserver pgp.mit.edu %?p?--passphrase-fd 0? --no-verbose --batch -o - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --keyserver pgp.mit.edu --no-verbose --batch -o - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --keyserver pgp.mit.edu --passphrase-fd 0 --no-verbose --batch -o - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --no-verbose --batch -o - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --keyserver pgp.mit.edu --no-verbose --batch -o - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --no-verbose --batch -o - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --keyserver pgp.mit.edu --no-verbose --batch -o - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch -o - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg --keyserver pgp.mit.edu -v --batch -o - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp --passphrase-fd 0 -v --batch -o - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg --keyserver pgp.mit.edu --passphrase-fd 0 -v --batch -o - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --keyserver pgp.mit.edu --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="gpg --keyserver pgp.mit.edu --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --keyserver pgp.mit.edu --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --keyserver pgp.mit.edu --no-verbose --batch --with-colons --list-keys %r" 

# read in the secret key ring
set pgp_list_secring_command="gpg --keyserver pgp.mit.edu --no-verbose --batch --with-colons --list-secret-keys %r" 

# receive key from keyserver:
set pgp_getkeys_command=""
set pgp_autosign="yes"
set pgp_sign_as="" # undefined
# }}}
